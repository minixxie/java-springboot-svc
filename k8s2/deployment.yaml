apiVersion: apps/v1
kind: Deployment
metadata:
  name: java-springboot2-svc
  namespace: apps
spec:
  replicas: 2
  selector:
    matchLabels:
      appID: java-springboot2-svc
  template:
    metadata:
      annotations:
        # https://access.redhat.com/documentation/en-us/openshift_container_platform/4.4/html/jaeger/jaeger-sidecar-automatic_jaeger-deploying
        # "sidecar.jaegertracing.io/inject": "true"
        # https://github.com/open-telemetry/opentelemetry-helm-charts/tree/main/charts/opentelemetry-operator#install-opentelemetry-collector
        sidecar.opentelemetry.io/inject: "true"
      labels:
        appID: java-springboot2-svc
    spec:
      containers:
        - name: java
          image: java-springboot-svc:dont_push
          imagePullPolicy: IfNotPresent
          # --add-opens java.base/java.lang=ALL-UNNAMED - https://stackoverflow.com/questions/68168691/java-lang-reflect-inaccessibleobjectexception-unable-to-make-protected-final-ja
          command:
            - /bin/bash
            - -c
            - |
              /update-tz.sh
              java --add-opens java.base/java.lang=ALL-UNNAMED -javaagent:/opentelemetry-javaagent.jar -jar /app.jar
          # java --add-opens java.base/java.lang=ALL-UNNAMED -jar /app.jar
          # java --add-opens java.base/java.lang=ALL-UNNAMED -javaagent:/opentelemetry-javaagent.jar -jar /app.jar
          ports:
            - name: http
              containerPort: 8080  # spring boot HTTP port
            - name: http-metrics
              containerPort: 8081  # spring boot actuator HTTP port
            - name: xxljob
              containerPort: 9999  # xxl-job HTTP port
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8081
            initialDelaySeconds: 10
            periodSeconds: 30
          env:
            - name: appID
              value: java-springboot2-svc
            # just in case useful for accessing any daemonset
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP

            # [OTEL variables]
            # 1. https://opentelemetry.io/docs/concepts/sdk-configuration/otlp-exporter-configuration/
            # 2. https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk-extensions/autoconfigure/README.md

            # same as JVM option -Dotel.exporter.otlp.endpoint=http://signoz-otel-collector.signoz.svc:4317
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              #value: "http://signoz-otel-collector.signoz.svc:4317"  # sending gRPC to collector in signoz chart
              #value: "http://opentelemetry-collector.otel.svc:4317"  # sending gRPC to collector in opentelemetry-collector chart (must have http:// prefix)
              value: "http://localhost:4317"  # sending gRPC to otel collector as an injected side-car (must have http:// prefix)
              #value: "localhost:4317"  # sending gRPC to otel collector as an injected side-car (must have http:// prefix)
              #value: "sidecar-collector.apps.svc:4317"  # sending gRPC to otel collector as an injected side-car (must have http:// prefix)
            - name: OTEL_EXPORTER_OTLP_PROTOCOL
              value: grpc
            # same as JVM option -Dotel.resource.attributes=service.name=java-springboot2-svc
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: "service.name=java-springboot2-svc"
            - name: OTEL_SDK_DISABLED
              value: "false"
            # finer control on "logs" exporting by the otel java agent
            #- name: OTEL_LOGS_EXPORTER
            #  value: "none"
            # finer control on "metrics" exporting by the otel java agent
            #- name: OTEL_METRICS_EXPORTER
            #  value: "none"
